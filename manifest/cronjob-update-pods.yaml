apiVersion: batch/v1
kind: CronJob
metadata:
  name: update-pods-md
  namespace: prod
spec:
  schedule: "0 */3 * * *"  # Run every 3 hours for more dynamic updates
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1  # Limit retries to 1 attempt
      template:
        spec:
          containers:
          - name: update-pods
            image: bitnami/git:latest
            env:
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github-token-secret
                  key: GITHUB_TOKEN
            - name: GIT_USERNAME
              value: "zoonderkins"
            - name: GIT_EMAIL
              value: "git-ed@runbox.no"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              # Install required tools 
              apt-get update && apt-get install -y curl jq
              
              # Install kubectl directly from Kubernetes
              echo "Installing kubectl..."
              KUBE_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
              curl -LO "https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubectl"
              chmod +x ./kubectl
              mv ./kubectl /usr/local/bin/kubectl
              
              # Verify kubectl installation
              kubectl version --client
              
              # Debug token - print first few characters (safely)
              echo "GitHub token length: ${#GITHUB_TOKEN}"
              echo "Token prefix: ${GITHUB_TOKEN:0:4}..."
              
              # Clone the repository
              echo "Cloning repository..."
              REPO_DIR="/tmp/repo"
              git clone "https://${GIT_USERNAME}:${GITHUB_TOKEN}@github.com/zoonderkins/edoo-k8s-demo-site.git" "${REPO_DIR}"
              
              # Configure git (inside repo directory)
              cd "${REPO_DIR}"
              git config --global user.email "${GIT_EMAIL}"
              git config --global user.name "${GIT_USERNAME}"              
              # Create directories if they don't exist
              echo "Ensuring directories exist..."
              mkdir -p content static/api static/css static/js
              
              # Get actual pod information
              echo "Getting pod information..."
              POD_INFO=$(kubectl get pods --all-namespaces -o=custom-columns=NAME:.metadata.name,NAMESPACE:.metadata.namespace,STATUS:.status.phase,NODE:.spec.nodeName --no-headers | sort -b -k2)
              
              # Calculate pod totals
              TOTAL_PODS=$(echo "$POD_INFO" | wc -l | tr -d ' ')
              RUNNING_PODS=$(echo "$POD_INFO" | grep -c "Running" || echo "0")
              CURRENT_DATE=$(date -Iseconds)
              
              # Get current pod's worker node
              WORKER_NODE=$(kubectl get pod -o jsonpath="{.spec.nodeName}" -n ${POD_NAMESPACE} ${HOSTNAME} 2>/dev/null || echo "unknown-worker")
              echo "Current worker node: ${WORKER_NODE}"
              
              # Get GitHub commit hash
              if [ -n "${GITHUB_SHA}" ]; then
                GIT_HASH="${GITHUB_SHA:0:7}"
              else
                GIT_HASH=$(git rev-parse --short HEAD)
              fi
              
              # Format date in CST timezone
              if ! dpkg -l | grep -q tzdata; then
                apt-get update && apt-get install -y tzdata
              fi
              
              export TZ="America/Chicago"
              FORMATTED_DATE=$(date "+%Y-%m-%d %H:%M:%S CST")
              
              # Update _index.md frontmatter with current data
              echo "Updating _index.md frontmatter..."
              echo "---" > content/_index.md
              echo "title: \"K0s Color Dashboard\"" >> content/_index.md
              echo "date: ${CURRENT_DATE}" >> content/_index.md
              echo "markup: html" >> content/_index.md
              echo "totalPods: ${TOTAL_PODS}" >> content/_index.md
              echo "runningPods: ${RUNNING_PODS}" >> content/_index.md
              echo "workerNode: \"${WORKER_NODE}\"" >> content/_index.md
              echo "lastUpdate: \"${FORMATTED_DATE}\"" >> content/_index.md
              echo "gitHash: \"${GIT_HASH}\"" >> content/_index.md
              echo "---" >> content/_index.md
              echo "" >> content/_index.md
              echo "<!-- This content is dynamically updated by the CronJob -->" >> content/_index.md
              echo "<!-- The dashboard UI is rendered by Hugo templates and CSS/JS files -->" >> content/_index.md
              
              # Create JSON API file for dynamic loading
              echo "Creating JSON API file..."
              echo "{" > static/api/pods.json
              echo "  \"metadata\": {" >> static/api/pods.json
              echo "    \"lastUpdate\": \"${CURRENT_DATE}\"," >> static/api/pods.json
              echo "    \"totalPods\": ${TOTAL_PODS}," >> static/api/pods.json
              echo "    \"runningPods\": ${RUNNING_PODS}," >> static/api/pods.json
              echo "    \"workerNode\": \"${WORKER_NODE}\"," >> static/api/pods.json
              echo "    \"gitHash\": \"${GIT_HASH}\"" >> static/api/pods.json
              echo "  }," >> static/api/pods.json
              echo "  \"pods\": [" >> static/api/pods.json
              
              # Add pod data to JSON
              FIRST_POD=true
              echo "$POD_INFO" | while IFS= read -r line; do
                if [ -n "$line" ]; then
                  POD_NAME=$(echo "$line" | awk '{print $1}')
                  POD_NAMESPACE=$(echo "$line" | awk '{print $2}')
                  POD_STATUS=$(echo "$line" | awk '{print $3}')
                  POD_NODE=$(echo "$line" | awk '{print $4}')
                  
                  if [ "$FIRST_POD" = "true" ]; then
                    FIRST_POD=false
                  else
                    echo "," >> static/api/pods.json
                  fi
                  
                  echo "    {" >> static/api/pods.json
                  echo "      \"name\": \"${POD_NAME}\"," >> static/api/pods.json
                  echo "      \"namespace\": \"${POD_NAMESPACE}\"," >> static/api/pods.json
                  echo "      \"status\": \"${POD_STATUS}\"," >> static/api/pods.json
                  echo "      \"node\": \"${POD_NODE}\"" >> static/api/pods.json
                  echo "    }" >> static/api/pods.json
                fi
              done
              
              # Close JSON structure
              echo "  ]" >> static/api/pods.json
              echo "}" >> static/api/pods.json
              
              # Check if there are any changes to commit
              if git diff --quiet && git diff --cached --quiet; then
                echo "No changes detected, skipping commit"
                exit 0
              fi              
              # Add all changes
              git add .
              
              # Commit changes
              echo "Committing changes..."
              git commit -m "[ci] Update pod information - ${FORMATTED_DATE}

              - Total pods: ${TOTAL_PODS}
              - Running pods: ${RUNNING_PODS}
              - Worker node: ${WORKER_NODE}
              - Git hash: ${GIT_HASH}
              
              Updated by cronjob from pod: ${HOSTNAME}"
              
              # Push changes
              echo "Pushing changes to GitHub..."
              git push origin master
              
              echo "Pod information updated successfully!"
          restartPolicy: Never
          serviceAccountName: github-push